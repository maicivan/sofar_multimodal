#!/usr/bin/env python

import numpy as n
import rospy
from std_msgs.msg import String
from std_msgs.msg import Float32MultiArray
from sofar_multimodal.msg import adapter
from sofar_multimodal.msg import feature
from sofar_multimodal.msg import obj
from sofar_multimodal.msg import commonFeature
from sofar_multimodal.msg import selectorMatcher

def callback(data):	
	
	color_dictionary = {'black':[(0,0,0)],
						'blue':[0,0,255],
						'brown': [128,0,0],
						'green': [0,255,0],
						'grey': [128,128,128],
						'magenta': [255,0,255],
						'orange': [255,165,0],
						'purple': [128,0,128],
						'red': [255,0,0],
						'white': [255,255,255],
						'yellow': [255,255,0]}
	
	for i in range(0,len(data.matcher)):
			
			comp = Float32MultiArray()
			comp = n.zeros((len(data.matcher[i].common[0].adap),len(data.matcher[i].common[1].adap)))
			
			for j in range(0,len(data.matcher[i].common[0].adap[0].obj)):				
				if data.matcher[i].common[0].adap[0].obj[j].name == 'pose_2d':
					for l in range(0,len(data.matcher[i].common[0].adap)):
						for k in range(0,len(data.matcher[i].common[1].adap)):
							deltaX = float(data.matcher[i].common[0].adap[l].obj[j].value[0]) - float(data.matcher[i].common[1].adap[k].obj[j].value[0])						
							deltaY = float(data.matcher[i].common[0].adap[l].obj[j].value[1]) - float(data.matcher[i].common[1].adap[k].obj[j].value[1])
							comp[l][k] = comp[l][k] + pow((pow(deltaX,2)+ pow(deltaY,2)),0.5)				
				
				if (data.matcher[i].common[0].adap[0].obj[j].name == 'pose_3d'):
					for l in range(0,len(data.matcher[i].common[0].adap)):
						for k in range(0,len(data.matcher[i].common[1].adap)):
							deltaX = float(data.matcher[i].common[0].adap[l].obj[j].value[0]) - float(data.matcher[i].common[1].adap[k].obj[j].value[0])							
							deltaY = float(data.matcher[i].common[0].adap[l].obj[j].value[1]) - float(data.matcher[i].common[1].adap[k].obj[j].value[1])
							deltaZ = float(data.matcher[i].common[0].adap[l].obj[j].value[2]) - float(data.matcher[i].common[1].adap[k].obj[j].value[2])
							comp[l][k] = comp[l][k] + pow((pow(deltaX,2)+ pow(deltaY,2)+pow(deltaZ,2)),0.5)
				
				if (data.matcher[i].common[0].adap[0].obj[j].name == 'color_name'):
					for l in range(0,len(data.matcher[i].common[0].adap)):
						for k in range(0,len(data.matcher[i].common[1].adap)):
							color1 = color_dictionary.get(data.matcher[i].common[0].adap[l].obj[j].value[0],-1)
							color2 = color_dictionary.get(data.matcher[i].common[1].adap[k].obj[j].value[0],-1)
							delta_color_R = color1[0] - color2[0]
							delta_color_G = color1[1] - color2[1]
							delta_color_B = color1[2] - color2[2]
							comp[l][k] = comp[l][k] + pow((pow(delta_color_R,2) + pow(delta_color_G,2) + pow(delta_color_B,2)),0.5)
				
				
				if (data.matcher[i].common[0].adap[0].obj[j].name == 'color_rgb'):
					for l in range(0,len(data.matcher[i].common[0].adap)):
						for k in range(0,len(data.matcher[i].common[1].adap)):
							delta_color_R = float(data.matcher[i].common[0].adap[l].obj[j].value[0]) - float(data.matcher[i].common[1].adap[k].obj[j].value[0])						
							delta_color_G = float(data.matcher[i].common[0].adap[l].obj[j].value[1]) - float(data.matcher[i].common[1].adap[k].obj[j].value[1])
							delta_color_B = float(data.matcher[i].common[0].adap[l].obj[j].value[2]) - float(data.matcher[i].common[1].adap[k].obj[j].value[2])
							comp[l][k] = comp[l][k] + pow((pow(delta_color_R,2)+ pow(delta_color_G,2)+pow(delta_color_B,2)),0.5)
					
				
							
				if (data.matcher[i].common[0].adap[0].obj[j].name == 'colour_hsv'):
					for l in range(0,len(data.matcher[i].common[0].adap)):
						for k in range(0,len(data.matcher[i].common[1].adap)):
							delta_color_H = float(data.matcher[i].common[0].adap[l].obj[j].value[0]) - float(data.matcher[i].common[1].adap[k].obj[j].value[0])							
							delta_color_S = float(data.matcher[i].common[0].adap[l].obj[j].value[1]) - float(data.matcher[i].common[1].adap[k].obj[j].value[1])
							delta_color_V = float(data.matcher[i].common[0].adap[l].obj[j].value[2]) - float(data.matcher[i].common[1].adap[k].obj[j].value[2])
							comp[l][k] = comp[l][k] + pow((pow(delta_color_H,2)+ pow(delta_color_S,2)+pow(delta_color_V,2)),0.5)
			print()				
			print(comp)	
				 
				
				


def listener():
    
    rospy.init_node('table', anonymous=True)
    rospy.Subscriber('matcherChannel', selectorMatcher, callback)

    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

if __name__ == '__main__':
    listener()



